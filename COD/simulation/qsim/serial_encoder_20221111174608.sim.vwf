/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2019  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and any partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details, at
https://fpgasoftware.intel.com/eula.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("auxAnd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("auxAnd[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxXor")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("auxXor[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("code")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("code[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("code1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code1";
}

SIGNAL("code1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code1";
}

SIGNAL("code1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code1";
}

SIGNAL("mIn")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nGRst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("auxAnd[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.001;
			LEVEL X FOR 1.506;
			LEVEL 0 FOR 994.493;
		}
	}
}

TRANSITION_LIST("auxAnd[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.653;
			LEVEL X FOR 1.503;
			LEVEL 0 FOR 102.603;
			LEVEL 1 FOR 199.815;
			LEVEL 0 FOR 692.426;
		}
	}
}

TRANSITION_LIST("auxAnd[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.684;
			LEVEL X FOR 1.215;
			LEVEL 0 FOR 995.101;
		}
	}
}

TRANSITION_LIST("auxAnd[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.667;
			LEVEL X FOR 1.124;
			LEVEL 0 FOR 103.669;
			LEVEL 1 FOR 198.782;
			LEVEL 0 FOR 0.363;
			LEVEL 1 FOR 0.922;
			LEVEL 0 FOR 691.473;
		}
	}
}

TRANSITION_LIST("auxAnd[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.182;
			LEVEL X FOR 0.895;
			LEVEL 0 FOR 995.923;
		}
	}
}

TRANSITION_LIST("auxAnd[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.792;
			LEVEL X FOR 0.895;
			LEVEL 0 FOR 103.864;
			LEVEL 1 FOR 198.826;
			LEVEL 0 FOR 692.623;
		}
	}
}

TRANSITION_LIST("auxAnd[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.764;
			LEVEL X FOR 1.139;
			LEVEL 0 FOR 302.766;
			LEVEL 1 FOR 0.97;
			LEVEL 0 FOR 691.361;
		}
	}
}

TRANSITION_LIST("auxAnd[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.639;
			LEVEL X FOR 1.122;
			LEVEL 0 FOR 103.676;
			LEVEL 1 FOR 198.775;
			LEVEL 0 FOR 0.369;
			LEVEL 1 FOR 0.916;
			LEVEL 0 FOR 691.503;
		}
	}
}

TRANSITION_LIST("auxXor[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.223;
			LEVEL X FOR 105.504;
			LEVEL 1 FOR 0.828;
			LEVEL X FOR 3.167;
			LEVEL 1 FOR 596.84;
			LEVEL 0 FOR 0.11;
			LEVEL 1 FOR 0.535;
			LEVEL 0 FOR 0.104;
			LEVEL 1 FOR 0.309;
			LEVEL 0 FOR 0.075;
			LEVEL 1 FOR 0.338;
			LEVEL 0 FOR 0.046;
			LEVEL 1 FOR 287.921;
		}
	}
}

TRANSITION_LIST("auxXor[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.674;
			LEVEL X FOR 105.345;
			LEVEL 0 FOR 0.823;
			LEVEL X FOR 3.067;
			LEVEL 0 FOR 597.761;
			LEVEL 1 FOR 0.088;
			LEVEL 0 FOR 0.325;
			LEVEL 1 FOR 0.059;
			LEVEL 0 FOR 0.354;
			LEVEL 1 FOR 0.03;
			LEVEL 0 FOR 0.383;
			LEVEL 1 FOR 0.001;
			LEVEL 0 FOR 0.458;
			LEVEL 1 FOR 287.632;
		}
	}
}

TRANSITION_LIST("auxXor[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.532;
			LEVEL X FOR 105.275;
			LEVEL 1 FOR 0.799;
			LEVEL X FOR 2.067;
			LEVEL 1 FOR 597.905;
			LEVEL 0 FOR 0.154;
			LEVEL 1 FOR 1.307;
			LEVEL 0 FOR 0.16;
			LEVEL 1 FOR 0.253;
			LEVEL 0 FOR 0.131;
			LEVEL 1 FOR 0.282;
			LEVEL 0 FOR 0.102;
			LEVEL 1 FOR 288.033;
		}
	}
}

TRANSITION_LIST("auxXor[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.75;
			LEVEL X FOR 105.468;
			LEVEL 0 FOR 0.815;
			LEVEL X FOR 3.036;
			LEVEL 0 FOR 195.696;
			LEVEL 1 FOR 0.343;
			LEVEL 0 FOR 401.092;
			LEVEL 1 FOR 0.32;
			LEVEL 0 FOR 0.307;
			LEVEL 1 FOR 0.077;
			LEVEL 0 FOR 0.336;
			LEVEL 1 FOR 0.048;
			LEVEL 0 FOR 0.365;
			LEVEL 1 FOR 0.019;
			LEVEL 0 FOR 0.846;
			LEVEL 1 FOR 287.482;
		}
	}
}

TRANSITION_LIST("auxXor[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.442;
			LEVEL X FOR 105.999;
			LEVEL 1 FOR 0.788;
			LEVEL X FOR 3.056;
			LEVEL 1 FOR 596.947;
			LEVEL 0 FOR 0.149;
			LEVEL 1 FOR 0.652;
			LEVEL 0 FOR 0.157;
			LEVEL 1 FOR 0.256;
			LEVEL 0 FOR 0.128;
			LEVEL 1 FOR 0.285;
			LEVEL 0 FOR 0.099;
			LEVEL 1 FOR 0.314;
			LEVEL 0 FOR 0.07;
			LEVEL 1 FOR 287.658;
		}
	}
}

TRANSITION_LIST("auxXor[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.604;
			LEVEL X FOR 105.464;
			LEVEL 0 FOR 0.848;
			LEVEL X FOR 2.017;
			LEVEL 0 FOR 196.563;
			LEVEL 1 FOR 0.247;
			LEVEL 0 FOR 402.605;
			LEVEL 1 FOR 0.113;
			LEVEL 0 FOR 0.713;
			LEVEL 1 FOR 0.055;
			LEVEL 0 FOR 0.171;
			LEVEL 1 FOR 287.6;
		}
	}
}

TRANSITION_LIST("auxXor[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.474;
			LEVEL X FOR 105.382;
			LEVEL 1 FOR 0.829;
			LEVEL X FOR 3.065;
			LEVEL 1 FOR 195.928;
			LEVEL 0 FOR 0.14;
			LEVEL 1 FOR 400.902;
			LEVEL 0 FOR 0.441;
			LEVEL 1 FOR 0.321;
			LEVEL 0 FOR 0.063;
			LEVEL 1 FOR 0.35;
			LEVEL 0 FOR 0.034;
			LEVEL 1 FOR 289.071;
		}
	}
}

TRANSITION_LIST("auxXor[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.762;
			LEVEL X FOR 105.179;
			LEVEL 0 FOR 0.739;
			LEVEL X FOR 3.129;
			LEVEL 0 FOR 195.592;
			LEVEL 1 FOR 0.104;
			LEVEL 0 FOR 0.083;
			LEVEL 1 FOR 0.38;
			LEVEL 0 FOR 401.264;
			LEVEL 1 FOR 0.25;
			LEVEL 0 FOR 0.163;
			LEVEL 1 FOR 0.221;
			LEVEL 0 FOR 0.192;
			LEVEL 1 FOR 0.192;
			LEVEL 0 FOR 0.221;
			LEVEL 1 FOR 0.163;
			LEVEL 0 FOR 0.25;
			LEVEL 1 FOR 287.116;
		}
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
		}
	}
}

TRANSITION_LIST("code[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.185;
			LEVEL X FOR 104.286;
			LEVEL 1 FOR 0.77;
			LEVEL X FOR 0.814;
			LEVEL 1 FOR 600.132;
			LEVEL 0 FOR 0.149;
			LEVEL 1 FOR 0.139;
			LEVEL 0 FOR 0.131;
			LEVEL 1 FOR 0.282;
			LEVEL 0 FOR 0.102;
			LEVEL 1 FOR 0.311;
			LEVEL 0 FOR 0.073;
			LEVEL 1 FOR 0.34;
			LEVEL 0 FOR 0.044;
			LEVEL 1 FOR 289.242;
		}
	}
}

TRANSITION_LIST("code[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.546;
			LEVEL X FOR 104.312;
			LEVEL 1 FOR 0.736;
			LEVEL X FOR 0.844;
			LEVEL 1 FOR 600.103;
			LEVEL 0 FOR 0.18;
			LEVEL 1 FOR 0.106;
			LEVEL 0 FOR 0.162;
			LEVEL 1 FOR 0.251;
			LEVEL 0 FOR 0.133;
			LEVEL 1 FOR 0.28;
			LEVEL 0 FOR 0.104;
			LEVEL 1 FOR 0.309;
			LEVEL 0 FOR 0.075;
			LEVEL 1 FOR 288.859;
		}
	}
}

TRANSITION_LIST("code[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.91;
			LEVEL X FOR 104.511;
			LEVEL 1 FOR 601.079;
			LEVEL 0 FOR 0.061;
			LEVEL 1 FOR 289.439;
		}
	}
}

TRANSITION_LIST("code[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.069;
			LEVEL X FOR 104.639;
			LEVEL 1 FOR 600.58;
			LEVEL 0 FOR 0.142;
			LEVEL 1 FOR 0.105;
			LEVEL 0 FOR 0.108;
			LEVEL 1 FOR 0.305;
			LEVEL 0 FOR 0.079;
			LEVEL 1 FOR 0.334;
			LEVEL 0 FOR 0.05;
			LEVEL 1 FOR 289.589;
		}
	}
}

TRANSITION_LIST("code[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.754;
			LEVEL X FOR 104.302;
			LEVEL 1 FOR 0.759;
			LEVEL X FOR 0.821;
			LEVEL 1 FOR 600.125;
			LEVEL 0 FOR 0.158;
			LEVEL 1 FOR 0.127;
			LEVEL 0 FOR 0.141;
			LEVEL 1 FOR 0.272;
			LEVEL 0 FOR 0.112;
			LEVEL 1 FOR 0.301;
			LEVEL 0 FOR 0.083;
			LEVEL 1 FOR 0.33;
			LEVEL 0 FOR 0.054;
			LEVEL 1 FOR 288.661;
		}
	}
}

TRANSITION_LIST("code[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.156;
			LEVEL X FOR 105.434;
			LEVEL 1 FOR 600.302;
			LEVEL 0 FOR 0.16;
			LEVEL 1 FOR 0.138;
			LEVEL 0 FOR 0.179;
			LEVEL 1 FOR 0.234;
			LEVEL 0 FOR 0.15;
			LEVEL 1 FOR 0.263;
			LEVEL 0 FOR 0.121;
			LEVEL 1 FOR 0.292;
			LEVEL 0 FOR 0.092;
			LEVEL 1 FOR 0.321;
			LEVEL 0 FOR 0.063;
			LEVEL 1 FOR 289.095;
		}
	}
}

TRANSITION_LIST("code[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.287;
			LEVEL X FOR 104.665;
			LEVEL 1 FOR 600.561;
			LEVEL 0 FOR 0.159;
			LEVEL 1 FOR 0.089;
			LEVEL 0 FOR 0.125;
			LEVEL 1 FOR 0.288;
			LEVEL 0 FOR 0.096;
			LEVEL 1 FOR 0.317;
			LEVEL 0 FOR 0.067;
			LEVEL 1 FOR 0.346;
			LEVEL 0 FOR 0.038;
			LEVEL 1 FOR 289.962;
		}
	}
}

TRANSITION_LIST("code[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.589;
			LEVEL X FOR 105.435;
			LEVEL 1 FOR 600.29;
			LEVEL 0 FOR 0.173;
			LEVEL 1 FOR 0.125;
			LEVEL 0 FOR 0.19;
			LEVEL 1 FOR 0.223;
			LEVEL 0 FOR 0.161;
			LEVEL 1 FOR 0.252;
			LEVEL 0 FOR 0.132;
			LEVEL 1 FOR 0.281;
			LEVEL 0 FOR 0.103;
			LEVEL 1 FOR 0.31;
			LEVEL 0 FOR 0.074;
			LEVEL 1 FOR 288.662;
		}
	}
}

TRANSITION_LIST("code1[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 706.684;
			LEVEL 1 FOR 3.34;
			LEVEL 0 FOR 289.976;
		}
	}
}

TRANSITION_LIST("code1[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 306.41;
			LEVEL 1 FOR 400.014;
			LEVEL 0 FOR 293.576;
		}
	}
}

TRANSITION_LIST("code1[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 106.807;
			LEVEL 1 FOR 200.01;
			LEVEL 0 FOR 199.99;
			LEVEL 1 FOR 200.01;
			LEVEL 0 FOR 199.99;
			LEVEL 1 FOR 93.193;
		}
	}
}

TRANSITION_LIST("mIn")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 880.0;
		}
	}
}

TRANSITION_LIST("nGRst")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 1000.0;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16, 17;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "code";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
	CHILDREN = 20, 21, 22, 23, 24, 25, 26, 27;
}

DISPLAY_LINE
{
	CHANNEL = "code[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
	CHILDREN = 29, 30, 31;
}

DISPLAY_LINE
{
	CHANNEL = "code1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "code1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "code1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "mIn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nGRst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
