/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2019  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and any partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details, at
https://fpgasoftware.intel.com/eula.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("auxAnd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("auxAnd[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxAnd[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxAnd";
}

SIGNAL("auxXor")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("auxXor[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("auxXor[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "auxXor";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("code")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("code[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code";
}

SIGNAL("code1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("code1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code1";
}

SIGNAL("code1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code1";
}

SIGNAL("code1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "code1";
}

SIGNAL("mIn")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nGRst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("auxAnd[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 182.292;
			LEVEL 1 FOR 49.553;
			LEVEL 0 FOR 768.155;
		}
	}
}

TRANSITION_LIST("auxAnd[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.452;
			LEVEL X FOR 0.907;
			LEVEL 0 FOR 27.401;
			LEVEL 1 FOR 49.868;
			LEVEL 0 FOR 100.159;
			LEVEL 1 FOR 49.841;
			LEVEL 0 FOR 100.132;
			LEVEL 1 FOR 49.868;
			LEVEL 0 FOR 250.132;
			LEVEL 1 FOR 49.868;
			LEVEL 0 FOR 317.372;
		}
	}
}

TRANSITION_LIST("auxAnd[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.534;
			LEVEL X FOR 1.152;
			LEVEL 0 FOR 127.11;
			LEVEL 1 FOR 0.22;
			LEVEL 0 FOR 50.185;
			LEVEL 1 FOR 49.754;
			LEVEL 0 FOR 766.045;
		}
	}
}

TRANSITION_LIST("auxAnd[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.077;
			LEVEL X FOR 0.909;
			LEVEL 0 FOR 27.378;
			LEVEL 1 FOR 49.891;
			LEVEL 0 FOR 49.876;
			LEVEL 1 FOR 0.296;
			LEVEL 0 FOR 49.969;
			LEVEL 1 FOR 49.859;
			LEVEL 0 FOR 100.109;
			LEVEL 1 FOR 49.891;
			LEVEL 0 FOR 250.109;
			LEVEL 1 FOR 49.891;
			LEVEL 0 FOR 317.745;
		}
	}
}

TRANSITION_LIST("auxAnd[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.245;
			LEVEL X FOR 0.912;
			LEVEL 0 FOR 127.43;
			LEVEL 1 FOR 49.944;
			LEVEL 0 FOR 0.128;
			LEVEL 1 FOR 49.767;
			LEVEL 0 FOR 767.574;
		}
	}
}

TRANSITION_LIST("auxAnd[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.161;
			LEVEL X FOR 0.998;
			LEVEL 0 FOR 27.398;
			LEVEL 1 FOR 49.871;
			LEVEL 0 FOR 50.129;
			LEVEL 1 FOR 49.973;
			LEVEL 0 FOR 0.099;
			LEVEL 1 FOR 49.799;
			LEVEL 0 FOR 100.129;
			LEVEL 1 FOR 49.871;
			LEVEL 0 FOR 250.129;
			LEVEL 1 FOR 49.871;
			LEVEL 0 FOR 316.572;
		}
	}
}

TRANSITION_LIST("auxAnd[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.708;
			LEVEL X FOR 0.906;
			LEVEL 0 FOR 127.243;
			LEVEL 1 FOR 100.012;
			LEVEL 0 FOR 768.131;
		}
	}
}

TRANSITION_LIST("auxAnd[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.972;
			LEVEL X FOR 0.907;
			LEVEL 0 FOR 27.453;
			LEVEL 1 FOR 49.816;
			LEVEL 0 FOR 49.948;
			LEVEL 1 FOR 100.052;
			LEVEL 0 FOR 100.184;
			LEVEL 1 FOR 49.816;
			LEVEL 0 FOR 250.184;
			LEVEL 1 FOR 49.816;
			LEVEL 0 FOR 317.852;
		}
	}
}

TRANSITION_LIST("auxXor[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.174;
			LEVEL X FOR 1.627;
			LEVEL 0 FOR 177.514;
			LEVEL 1 FOR 102.049;
			LEVEL 0 FOR 714.636;
		}
	}
}

TRANSITION_LIST("auxXor[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.886;
			LEVEL X FOR 1.668;
			LEVEL 0 FOR 27.414;
			LEVEL 1 FOR 49.593;
			LEVEL 0 FOR 0.252;
			LEVEL 1 FOR 100.192;
			LEVEL 0 FOR 49.629;
			LEVEL 1 FOR 0.189;
			LEVEL 0 FOR 100.145;
			LEVEL 1 FOR 49.593;
			LEVEL 0 FOR 0.252;
			LEVEL 1 FOR 202.116;
			LEVEL 0 FOR 48.039;
			LEVEL 1 FOR 49.593;
			LEVEL 0 FOR 0.252;
			LEVEL 1 FOR 202.116;
			LEVEL 0 FOR 115.071;
		}
	}
}

TRANSITION_LIST("auxXor[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.107;
			LEVEL X FOR 1.679;
			LEVEL 0 FOR 127.286;
			LEVEL 1 FOR 0.19;
			LEVEL 0 FOR 50.215;
			LEVEL 1 FOR 49.724;
			LEVEL 0 FOR 0.128;
			LEVEL 1 FOR 52.106;
			LEVEL 0 FOR 714.565;
		}
	}
}

TRANSITION_LIST("auxXor[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.028;
			LEVEL X FOR 1.951;
			LEVEL 0 FOR 27.36;
			LEVEL 1 FOR 49.909;
			LEVEL 0 FOR 0.03;
			LEVEL 1 FOR 49.876;
			LEVEL 0 FOR 0.218;
			LEVEL 1 FOR 50.047;
			LEVEL 0 FOR 49.781;
			LEVEL 1 FOR 0.261;
			LEVEL 0 FOR 99.878;
			LEVEL 1 FOR 49.909;
			LEVEL 0 FOR 0.03;
			LEVEL 1 FOR 202.222;
			LEVEL 0 FOR 47.839;
			LEVEL 1 FOR 49.909;
			LEVEL 0 FOR 0.03;
			LEVEL 1 FOR 202.222;
			LEVEL 0 FOR 113.5;
		}
	}
}

TRANSITION_LIST("auxXor[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.403;
			LEVEL X FOR 1.884;
			LEVEL 0 FOR 127.485;
			LEVEL 1 FOR 49.442;
			LEVEL 0 FOR 0.485;
			LEVEL 1 FOR 0.107;
			LEVEL 0 FOR 49.537;
			LEVEL 1 FOR 0.213;
			LEVEL 0 FOR 766.444;
		}
	}
}

TRANSITION_LIST("auxXor[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.772;
			LEVEL X FOR 1.909;
			LEVEL 0 FOR 27.446;
			LEVEL 1 FOR 49.449;
			LEVEL 0 FOR 0.377;
			LEVEL 1 FOR 50.171;
			LEVEL 0 FOR 49.5;
			LEVEL 1 FOR 0.428;
			LEVEL 0 FOR 0.147;
			LEVEL 1 FOR 49.377;
			LEVEL 0 FOR 0.377;
			LEVEL 1 FOR 51.956;
			LEVEL 0 FOR 48.218;
			LEVEL 1 FOR 49.449;
			LEVEL 0 FOR 0.377;
			LEVEL 1 FOR 201.956;
			LEVEL 0 FOR 48.218;
			LEVEL 1 FOR 49.449;
			LEVEL 0 FOR 0.377;
			LEVEL 1 FOR 201.956;
			LEVEL 0 FOR 115.091;
		}
	}
}

TRANSITION_LIST("auxXor[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.278;
			LEVEL X FOR 1.9;
			LEVEL 0 FOR 127.233;
			LEVEL 1 FOR 49.671;
			LEVEL 0 FOR 50.085;
			LEVEL 1 FOR 0.266;
			LEVEL 0 FOR 766.567;
		}
	}
}

TRANSITION_LIST("auxXor[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.744;
			LEVEL X FOR 1.792;
			LEVEL 0 FOR 27.443;
			LEVEL 1 FOR 49.571;
			LEVEL 0 FOR 0.305;
			LEVEL 1 FOR 49.838;
			LEVEL 0 FOR 49.932;
			LEVEL 1 FOR 49.925;
			LEVEL 0 FOR 0.305;
			LEVEL 1 FOR 52.038;
			LEVEL 0 FOR 48.086;
			LEVEL 1 FOR 49.571;
			LEVEL 0 FOR 0.305;
			LEVEL 1 FOR 202.038;
			LEVEL 0 FOR 48.086;
			LEVEL 1 FOR 49.571;
			LEVEL 0 FOR 0.305;
			LEVEL 1 FOR 202.038;
			LEVEL 0 FOR 115.107;
		}
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
		}
	}
}

TRANSITION_LIST("code[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.496;
			LEVEL 1 FOR 554.894;
			LEVEL 0 FOR 27.703;
			LEVEL 1 FOR 272.297;
			LEVEL 0 FOR 27.703;
			LEVEL 1 FOR 113.907;
		}
	}
}

TRANSITION_LIST("code[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.972;
			LEVEL 1 FOR 254.885;
			LEVEL 0 FOR 27.667;
			LEVEL 1 FOR 713.476;
		}
	}
}

TRANSITION_LIST("code[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.186;
			LEVEL 1 FOR 554.915;
			LEVEL 0 FOR 27.637;
			LEVEL 1 FOR 272.363;
			LEVEL 0 FOR 27.637;
			LEVEL 1 FOR 113.262;
		}
	}
}

TRANSITION_LIST("code[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.334;
			LEVEL 1 FOR 254.849;
			LEVEL 0 FOR 27.703;
			LEVEL 1 FOR 713.114;
		}
	}
}

TRANSITION_LIST("code[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.461;
			LEVEL 1 FOR 254.901;
			LEVEL 0 FOR 27.696;
			LEVEL 1 FOR 272.304;
			LEVEL 0 FOR 27.696;
			LEVEL 1 FOR 272.304;
			LEVEL 0 FOR 27.696;
			LEVEL 1 FOR 113.942;
		}
	}
}

TRANSITION_LIST("code[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.051;
			LEVEL 1 FOR 995.949;
		}
	}
}

TRANSITION_LIST("code[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.929;
			LEVEL 1 FOR 254.854;
			LEVEL 0 FOR 27.743;
			LEVEL 1 FOR 272.257;
			LEVEL 0 FOR 27.743;
			LEVEL 1 FOR 272.257;
			LEVEL 0 FOR 27.743;
			LEVEL 1 FOR 113.474;
		}
	}
}

TRANSITION_LIST("code[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.304;
			LEVEL 1 FOR 995.696;
		}
	}
}

TRANSITION_LIST("code1[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 181.846;
			LEVEL 1 FOR 102.256;
			LEVEL 0 FOR 197.744;
			LEVEL 1 FOR 102.256;
			LEVEL 0 FOR 197.744;
			LEVEL 1 FOR 102.256;
			LEVEL 0 FOR 115.898;
		}
	}
}

TRANSITION_LIST("code1[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 82.203;
			LEVEL 1 FOR 100.181;
			LEVEL 0 FOR 99.819;
			LEVEL 1 FOR 2.323;
			LEVEL 0 FOR 97.677;
			LEVEL 1 FOR 100.181;
			LEVEL 0 FOR 99.819;
			LEVEL 1 FOR 2.323;
			LEVEL 0 FOR 97.677;
			LEVEL 1 FOR 100.181;
			LEVEL 0 FOR 99.819;
			LEVEL 1 FOR 2.323;
			LEVEL 0 FOR 97.677;
			LEVEL 1 FOR 17.797;
		}
	}
}

TRANSITION_LIST("code1[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 31.417;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 49.885;
			LEVEL 1 FOR 50.115;
			LEVEL 0 FOR 18.468;
		}
	}
}

TRANSITION_LIST("mIn")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 70.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 280.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 360.0;
		}
	}
}

TRANSITION_LIST("nGRst")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 1000.0;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxAnd[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16, 17;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "auxXor[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "code";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
	CHILDREN = 20, 21, 22, 23, 24, 25, 26, 27;
}

DISPLAY_LINE
{
	CHANNEL = "code[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "code1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
	CHILDREN = 29, 30, 31;
}

DISPLAY_LINE
{
	CHANNEL = "code1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "code1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "code1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "mIn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nGRst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
